{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statsitics/Statistics.js","components/Notification/Notification.js","utils/Feedback.js","components/App.js","index.js"],"names":["Section","title","children","FeedbackOptions","onLeaveFeedback","options","type","onClick","name","GOOD","NEUTRAL","BAD","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","Object","freeze","App","state","countTotalFeedback","countPositiveFeedbackPercentage","toFixed","handleFeedbackChanger","e","step","props","target","setState","prevState","this","className","Feedback","Component","defaultProps","ReactDOM","render","document","getElementById"],"mappings":"wMASeA,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,iCACE,4BAAKD,GACJC,ICwBUC,EA1BS,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,QAApB,OACtB,6BACE,4BACEC,KAAK,SACLC,QAASH,EACTI,KAAMH,EAAQI,MAHhB,QAOA,4BACEH,KAAK,SACLC,QAASH,EACTI,KAAMH,EAAQK,SAHhB,WAOA,4BACEJ,KAAK,SACLC,QAASH,EACTI,KAAMH,EAAQM,KAHhB,SCPWC,EAVI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,6BACE,oCAAUJ,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,EAAvB,OCAWC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,6BACE,2BAAIA,KCJOC,SAAOC,OAAO,CAC3BZ,KAAM,OACNC,QAAS,UACTC,IAAK,QCKcW,G,kNAKnBC,MAAQ,CACNV,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPS,mBAAqB,WAAO,IAAD,EACM,EAAKD,MAGpC,OAJyB,EACjBV,KADiB,EACXC,QADW,EACFC,K,EAMzBU,gCAAkC,WAAO,IAAD,EACP,EAAKF,MAA5BV,EAD8B,EAC9BA,KAGR,OAF0BA,GAAQA,EAFI,EACxBC,QADwB,EACfC,KACoC,KAEjCW,W,EAG5BC,sBAAwB,SAAAC,GAAM,IACpBC,EAAS,EAAKC,MAAdD,KACArB,EAASoB,EAAEG,OAAXvB,KAER,EAAKwB,UAAS,SAAAC,GAAS,sBAAQzB,EAAOyB,EAAUzB,GAAQqB,O,uDAGhD,IAAD,EACwBK,KAAKX,MAA5BV,EADD,EACCA,KAAME,EADP,EACOA,IAAKD,EADZ,EACYA,QAEnB,OACE,yBAAKqB,UAAU,QACb,kBAAC,EAAD,CAASlC,MAAM,wBACb,kBAAC,EAAD,CACEG,gBAAiB8B,KAAKP,sBACtBtB,QAAS+B,KAGb,kBAAC,EAAD,CAASnC,MAAM,eACVY,GAAQE,GAAOD,IAChB,kBAAC,EAAD,CACED,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOkB,KAAKV,qBACZP,mBAAoBiB,KAAKT,qCAEvB,kBAAC,EAAD,CAAcN,QAAQ,4B,GApDLkB,cAAZf,EACZgB,aAAe,CACpBT,KAAM,GCNVU,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.04b2dd5a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Section = ({ title, children }) => (\n  <section>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nexport default Section;\n","import React from 'react';\n;\n\nconst FeedbackOptions = ({ onLeaveFeedback, options }) => (\n  <div>\n    <button\n      type=\"button\"\n      onClick={onLeaveFeedback}\n      name={options.GOOD}\n    >\n      Good\n    </button>\n    <button\n      type=\"button\"\n      onClick={onLeaveFeedback}\n      name={options.NEUTRAL}\n    >\n      Neutral\n    </button>\n    <button\n      type=\"button\"\n      onClick={onLeaveFeedback}\n      name={options.BAD}\n    >\n      Bad\n    </button>\n  </div>\n);\n\nexport default FeedbackOptions;\n","import React from 'react';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <div>\n    <p>Good: {good}</p>\n    <p>Neutral: {neutral}</p>\n    <p>Bad: {bad}</p>\n    <p>Total: {total}</p>\n    <p>Positive feedback: {positivePercentage}%</p>   \n  </div>\n);\n\nexport default Statistics;\n","import React from 'react';\n\nconst Notification = ({ message }) => (\n  <div>\n    <p>{message}</p>\n  </div>\n);\n\nexport default Notification;\n","export default Object.freeze({\n  GOOD: 'good',\n  NEUTRAL: 'neutral',\n  BAD: 'bad',\n});\n","import React, { Component } from 'react';\nimport Section from './Section/Section';\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\nimport Statistics from './Statsitics/Statistics';\nimport Notification from './Notification/Notification';\nimport Feedback from '../utils/Feedback';\nimport './App.css'\n\nexport default class App extends Component {\n  static defaultProps = {\n    step: 1,\n  };\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    let total = good + neutral + bad;\n\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good, neutral, bad } = this.state;\n    let positivePercentage = (good / (good + neutral + bad)) * 100;\n\n    return positivePercentage.toFixed();\n  };\n\n  handleFeedbackChanger = e => {\n    const { step } = this.props;\n    const { name } = e.target;\n\n    this.setState(prevState => ({ [name]: prevState[name] + step }));\n  };\n\n  render() {\n    const { good, bad, neutral } = this.state;\n\n    return (\n      <div className=\"wrap\">\n        <Section title=\"Please live feedback\">\n          <FeedbackOptions\n            onLeaveFeedback={this.handleFeedbackChanger}\n            options={Feedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {((good || bad || neutral) && (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          )) || <Notification message=\"No feedback given\" />}\n        </Section>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}